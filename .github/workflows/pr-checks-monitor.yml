name: PR Checks Monitor

permissions:
  contents: write
  checks: write
  statuses: write
  pull-requests: write # write is required to add/removes labels from the given pull request (set to read if you don't want to use the labels feature of this action)

on:
  workflow_run:
    workflows: ["Lint check", "Format check", "Unit Tests"]
    types: [completed]

jobs:
  pr-checks-monitor:
    name: PR Checks Monitor
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.event == 'pull_request' }}

    steps:
      - name: Process PR checks and update status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflowRun = context.payload.workflow_run;
            console.log(`🔄 Starting PR checks monitor...`);
            console.log(`📋 Triggered by: ${workflowRun.name}`);
            console.log(`🌿 Head branch: ${workflowRun.head_branch}`);
            console.log(`✅ Workflow conclusion: ${workflowRun.conclusion}`);
            
            // Step 1: Find the PR for this branch
            console.log(`🔍 Step 1: Looking for PR on branch ${workflowRun.head_branch}...`);
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${workflowRun.head_branch}`,
              state: 'open'
            });
            
            if (prs.data.length === 0) {
              console.log(`❌ No open PR found for branch ${workflowRun.head_branch}`);
              return;
            }
            
            const pr = prs.data[0];
            console.log(`✅ Found PR #${pr.number}: "${pr.title}"`);
            console.log(`🏷️  PR state: ${pr.draft ? 'Draft' : 'Ready for Review'}`);
            console.log(`🔗 PR URL: ${pr.html_url}`);
            
            // Step 2: Get all check runs for the PR's head SHA
            console.log(`🔍 Step 2: Fetching all check runs for SHA ${pr.head.sha}...`);
            const checkRuns = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            console.log(`📊 Found ${checkRuns.data.check_runs.length} check runs`);
            
            // Step 3: Analyze check statuses
            console.log(`🔍 Step 3: Analyzing check statuses...`);
            let allPassed = true;
            const checkSummary = {};
            
            for (const check of checkRuns.data.check_runs) {
              console.log(`📋 Check: "${check.name}" - Status: ${check.status}, Conclusion: ${check.conclusion}`);
              
              checkSummary[check.name] = {
                status: check.status,
                conclusion: check.conclusion
              };
              
              // Check if this check is still pending/in progress or failed
              if (check.status !== 'completed' || (check.conclusion !== 'success' && check.conclusion !== 'neutral' && check.conclusion !== 'skipped')) {
                console.log(`❌ Check "${check.name}" is not successful (status: ${check.status}, conclusion: ${check.conclusion})`);
                allPassed = false;
              } else {
                console.log(`✅ Check "${check.name}" passed`);
              }
            }
            
            console.log(`📊 Check summary:`, JSON.stringify(checkSummary, null, 2));
            
            // Step 4: Get commit statuses as well (for external CI)
            console.log(`🔍 Step 4: Fetching commit statuses for SHA ${pr.head.sha}...`);
            const statuses = await github.rest.repos.listCommitStatusesForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            
            console.log(`📊 Found ${statuses.data.length} commit statuses`);
            
            for (const status of statuses.data) {
              console.log(`📋 Status: "${status.context}" - State: ${status.state}`);
              
              if (status.state === 'pending' || status.state === 'error' || status.state === 'failure') {
                console.log(`❌ Status "${status.context}" is not successful (state: ${status.state})`);
                allPassed = false;
              } else {
                console.log(`✅ Status "${status.context}" passed`);
              }
            }
            
            // Step 5: Decision making
            console.log(`🔍 Step 5: Making decision...`);
            console.log(`🎯 All checks passed: ${allPassed}`);
            console.log(`📝 PR is draft: ${pr.draft}`);
            
            if (!allPassed) {
              console.log(`⏳ Skipping PR update - not all checks have passed yet`);
              return;
            }
            
            if (!pr.draft) {
              console.log(`ℹ️  PR #${pr.number} is already ready for review - nothing to do`);
              return;
            }
            
            // Step 6: Update PR to ready for review
            console.log(`🚀 Step 6: All checks passed and PR is in draft - marking as ready for review...`);
            
            try {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                draft: false
              });
              
              console.log(`🎉 SUCCESS: PR #${pr.number} has been marked as ready for review!`);
              console.log(`🔗 PR URL: ${pr.html_url}`);
              
            } catch (error) {
              console.log(`❌ ERROR: Failed to update PR #${pr.number}:`, error.message);
              throw error;
            }

      # - name: Mark PR as Ready for Review
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const pullRequests = context.payload.check_suite.pull_requests;
      #       const checkSuiteHeadSha = context.payload.check_suite.head_sha;

      #       for (const pr of pullRequests) {
      #         // Verify this check suite was run for this specific PR's head commit
      #         if (pr.head.sha !== checkSuiteHeadSha) {
      #           console.log(`Skipping PR #${pr.number} - check suite SHA mismatch`);
      #           continue;
      #         }

      #         // Check if PR is in draft state
      #         const { data: pullRequest } = await github.rest.pulls.get({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           pull_number: pr.number
      #         });

      #         if (pullRequest.draft) {
      #           console.log(`Marking PR #${pr.number} as in Ready For Review`);

      #           await github.rest.pulls.update({
      #             owner: context.repo.owner,
      #             repo: context.repo.repo,
      #             pull_number: pr.number,
      #             draft: false
      #           });

      #           console.log(`PR #${pr.number} marked as in Ready For Review`);
      #         } else {
      #           console.log(`PR #${pr.number} is already in Ready For Review`);
      #         }
      #       }
