name: Mark PR Ready for Review

permissions:
  contents: read
  checks: read
  statuses: read
  pull-requests: write # write is required to add/removes labels from the given pull request (set to read if you don't want to use the labels feature of this action)

on:
  pull_request:
    types: [opened, reopened, synchronize, review_requested, review_request_removed, labeled, unlabeled]
  pull_request_review:
    types: [submitted, dismissed]

jobs:
  mark-ready-for-review:
    name: Mark PR Ready for Review
    runs-on: ubuntu-latest

    # if: github.event.check_suite.conclusion == 'success' && github.event.check_suite.pull_requests[0]
    
    steps:
      - name: It works
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(`Triggered with payload: ${toJson(context.payload)}`);
      
      - uses: GrantBirki/pr-status@v1.7.0
        id: pr-status
        with:
          evaluations: ci_passing # evaluate the given PR against the approved and ci_passing attributes
          exclude_checks: pr-status# exclude the pr-status check and my-other-check from CI evaluation
          pass_labels: ready-for-deployment # if the PR passes evaluation, apply the ready-for-deployment label
      
      - name: outputs
        run: |
          echo "approved: ${{ steps.pr-status.outputs.approved }}"
          echo "total approvals ${{ steps.pr-status.outputs.total_approvals }}"
          echo "evaluation ${{ steps.pr-status.outputs.evaluation }}"
          echo "merge state status ${{ steps.pr-status.outputs.merge_state_status }}"
          echo "commit status ${{ steps.pr-status.outputs.commit_status }}"
          echo "review decision ${{ steps.pr-status.outputs.review_decision }}"
          echo "...."

      # - name: Mark PR as Ready for Review
      #   uses: actions/github-script@v7
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const pullRequests = context.payload.check_suite.pull_requests;
      #       const checkSuiteHeadSha = context.payload.check_suite.head_sha;
            
      #       for (const pr of pullRequests) {
      #         // Verify this check suite was run for this specific PR's head commit
      #         if (pr.head.sha !== checkSuiteHeadSha) {
      #           console.log(`Skipping PR #${pr.number} - check suite SHA mismatch`);
      #           continue;
      #         }
              
      #         // Check if PR is in draft state
      #         const { data: pullRequest } = await github.rest.pulls.get({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           pull_number: pr.number
      #         });
              
      #         if (pullRequest.draft) {
      #           console.log(`Marking PR #${pr.number} as in Ready For Review`);
                
      #           await github.rest.pulls.update({
      #             owner: context.repo.owner,
      #             repo: context.repo.repo,
      #             pull_number: pr.number,
      #             draft: false
      #           });
                
      #           console.log(`PR #${pr.number} marked as in Ready For Review`);
      #         } else {
      #           console.log(`PR #${pr.number} is already in Ready For Review`);
      #         }
      #       }
